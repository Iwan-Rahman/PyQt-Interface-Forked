# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graphics_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pyqtgraph as pg
import numpy as np

class Ui_GraphicsWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(803, 626)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(20, 10, 761, 551))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.widget.sizePolicy().hasHeightForWidth())
        self.widget.setSizePolicy(sizePolicy)
        self.widget.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.widget.setAutoFillBackground(False)
        self.widget.setStyleSheet("")
        self.widget.setObjectName("widget")
        self.gridlayout = QtWidgets.QGridLayout(self.widget)
        self.gridlayout.setContentsMargins(0, 0, 0, 0)
        self.gridlayout.setObjectName("gridlayout")

        #ValuesWidget
        self.valuesWidget = QtWidgets.QWidget(self.widget)
        self.valuesWidget.setObjectName("valuesWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.valuesWidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.liveValueLabel = QtWidgets.QLabel(self.valuesWidget)
        self.liveValueLabel.setObjectName("liveValueLabel")
        self.horizontalLayout_2.addWidget(self.liveValueLabel)

        #Calc Values - NestedIn (Values Widget Layout)
        self.calcValWidget1 = QtWidgets.QWidget(self.valuesWidget)
        self.calcValWidget1.setObjectName("calcValWidget1")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.calcValWidget1)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.calculatedValueLabel1 = QtWidgets.QLabel(self.calcValWidget1)
        self.calculatedValueLabel1.setObjectName("calculatedValueLabel1")
        self.verticalLayout_4.addWidget(self.calculatedValueLabel1)
        self.configureButton1 = QtWidgets.QPushButton(self.calcValWidget1)
        self.configureButton1.setObjectName("configureButton1")
        self.verticalLayout_4.addWidget(self.configureButton1)
        self.horizontalLayout_2.addWidget(self.calcValWidget1)
        self.calcValWidget2 = QtWidgets.QWidget(self.valuesWidget)
        self.calcValWidget2.setObjectName("calcValWidget2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.calcValWidget2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.calculatedValueLabel2 = QtWidgets.QLabel(self.calcValWidget2)
        self.calculatedValueLabel2.setObjectName("calculatedValueLabel2")
        self.verticalLayout_3.addWidget(self.calculatedValueLabel2)
        self.configureButton2 = QtWidgets.QPushButton(self.calcValWidget2)
        self.configureButton2.setObjectName("configureButton2")
        self.verticalLayout_3.addWidget(self.configureButton2)
        self.horizontalLayout_2.addWidget(self.calcValWidget2)
        self.gridlayout.addWidget(self.valuesWidget, 3, 2, 1, 1)

        #PlotWidget
        self.plot_widget = pg.PlotWidget(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.plot_widget.sizePolicy().hasHeightForWidth())
        self.plot_widget.setSizePolicy(sizePolicy)
        self.plot_widget.setObjectName("plot_widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.plot_widget)
        self.verticalLayout_2.setContentsMargins(-1, 7, -1, -1)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.gridlayout.addWidget(self.plot_widget, 0, 2, 1, 1)

        #YDetailsWidget
        self.yDetails = QtWidgets.QWidget(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.yDetails.sizePolicy().hasHeightForWidth())
        self.yDetails.setSizePolicy(sizePolicy)
        self.yDetails.setStyleSheet("")
        self.yDetails.setObjectName("yDetails")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.yDetails)
        self.verticalLayout.setObjectName("verticalLayout")
        self.yAxisUnitLabel = QtWidgets.QLabel(self.yDetails)
        self.yAxisUnitLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.yAxisUnitLabel.setObjectName("yAxisUnitLabel")
        self.verticalLayout.addWidget(self.yAxisUnitLabel)
        self.yAxisLineEdit = QtWidgets.QLineEdit(self.yDetails)
        self.yAxisLineEdit.setObjectName("yAxisLineEdit")
        self.verticalLayout.addWidget(self.yAxisLineEdit)
        self.gridlayout.addWidget(self.yDetails, 0, 1, 1, 1)

        #XDetailsWidget
        self.xDetails = QtWidgets.QWidget(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.xDetails.sizePolicy().hasHeightForWidth())
        self.xDetails.setSizePolicy(sizePolicy)
        self.xDetails.setStyleSheet("")
        self.xDetails.setObjectName("xDetails")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.xDetails)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.xAxisUnitLabel = QtWidgets.QLabel(self.xDetails)
        self.xAxisUnitLabel.setObjectName("xAxisUnitLabel")
        self.horizontalLayout.addWidget(self.xAxisUnitLabel)
        self.xAxisLineEdit = QtWidgets.QLineEdit(self.xDetails)
        self.xAxisLineEdit.setObjectName("xAxisLineEdit")
        self.horizontalLayout.addWidget(self.xAxisLineEdit)
        self.gridlayout.addWidget(self.xDetails, 2, 2, 1, 1)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 803, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.liveValueLabel.setText(_translate("MainWindow", "Live Value:"))
        self.calculatedValueLabel1.setText(_translate("MainWindow", "TextLabel"))
        self.configureButton1.setText(_translate("MainWindow", "PushButton"))
        self.calculatedValueLabel2.setText(_translate("MainWindow", "TextLabel"))
        self.configureButton2.setText(_translate("MainWindow", "PushButton"))
        self.yAxisUnitLabel.setText(_translate("MainWindow", "Unit Y"))
        self.xAxisUnitLabel.setText(_translate("MainWindow", "Unit X"))

class GraphicsWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_GraphicsWindow()
        self.ui.setupUi(self)
        self.ui.plot_widget.setBackground('w')
        #self.ui.plot_widget.setConfigOption('foreground', 'k')

        self.data = {'x': [], 'y': []}
        self.generate_data()

        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.update_plot)
        self.timer.start(1000) #Interval = 1000ms or 1s
    
    def generate_data(self):
        """Generate dummy data using numpy."""
        self.data = {'x': np.linspace(0,10,100), 'y': np.sin(np.linspace(0, 10, 100))}
        print("Generated data:", self.data)  # Add this line
        self.plot_data(self.data['x'], self.data['y'])

    def plot_data(self, x, y):
        """Update the plot with new data."""
        self.ui.plot_widget.clear()  # Clear the plot before re-plotting
        print("Plotting data:", x, y)  # Add this line

        self.ui.plot_widget.plot(x,y,pen="w",symbol='o')
        
        # Set axis ranges to ensure both x and y are fully visible
        self.ui.plot_widget.setXRange(min(x), max(x))
        self.ui.plot_widget.setYRange(min(y), max(y))

    def update_plot(self):
   
        """Update the plot with new data based on the timer."""
        if not self.data['x']:
            current_time = 0
        else:
            current_time = self.data['x'][-1] + 1  # Increment x by 1 second
        
        new_y_value = np.sin(current_time)  # Replace with your desired function
        
        self.data['x'].append(current_time)
        self.data['y'].append(new_y_value)
        
        self.plot_data(self.data['x'], self.data['y'])

        print(f"Updated plot with x: {current_time}, y: {new_y_value}")

    def add_data(self, new_x, new_y):
        """Add new data points and update the plot."""
        self.data['x'] = np.concatenate((self.data['x'],new_x))
        self.data['y'] = np.concatenate((self.data['y'],new_y))
        self.plot_data(self.data['x'], self.data['y'])

    