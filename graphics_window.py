# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'graphics_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import pyqtgraph as pg
import numpy as np
from GraphicWindow import Ui_GraphicsWindow

class GraphicsWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_GraphicsWindow()
        self.ui.setupUi(self)
        self.ui.plot_widget.setBackground('w')

        self.data = {'x': [], 'y': []}
        self.generate_data()

        self.timer = QtCore.QTimer(self)
        self.timer.timeout.connect(self.update_plot)
        self.timer.start(1000) #Interval = 1000ms or 1s
    
    def generate_data(self):
        """Generate dummy data using numpy."""
        self.data = {'x': np.linspace(0,10,100), 'y': np.sin(np.linspace(0, 10, 100))}
        print("Generated data:", self.data)  # Add this line
        self.plot_data(self.data['x'], self.data['y'])

    def plot_data(self, x, y):
        """Update the plot with new data."""
        self.ui.plot_widget.clear()  # Clear the plot before re-plotting
        print("Plotting data:", x, y)  # Add this line

        self.ui.plot_widget.plot(x,y,pen="w",symbol='o')
        
        # Set axis ranges to ensure both x and y are fully visible
        self.ui.plot_widget.setXRange(min(x), max(x))
        self.ui.plot_widget.setYRange(min(y), max(y))

    def update_plot(self):
   
        """Update the plot with new data based on the timer."""
        if not self.data['x']:
            current_time = 0
        else:
            current_time = self.data['x'][-1] + 1  # Increment x by 1 second
        
        new_y_value = np.sin(current_time)  # Replace with your desired function
        
        self.data['x'].append(current_time)
        self.data['y'].append(new_y_value)
        
        self.plot_data(self.data['x'], self.data['y'])

        print(f"Updated plot with x: {current_time}, y: {new_y_value}")

    def add_data(self, new_x, new_y):
        """Add new data points and update the plot."""
        self.data['x'] = np.concatenate((self.data['x'],new_x))
        self.data['y'] = np.concatenate((self.data['y'],new_y))
        self.plot_data(self.data['x'], self.data['y'])

    